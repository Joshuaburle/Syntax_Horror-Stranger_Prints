#!/usr/bin/env python3

import tkinter as tk
from functools import partial
import os
try:
    from PIL import Image, ImageTk
    HAS_PIL = True
except ImportError:
    HAS_PIL = False

def on_closing():
    text_var.set("> Vous ne pouvez pas quitter comme ça...")
    root.bell()  # Fait un son pour l'effet

STORY = {
    "start": {
        "text": "Tu te réveilles dans une pièce étrange. Que fais-tu ?",
        "choices": [("Explorer", "explore"), ("Attendre", "wait")],
    },
    "explore": {
        "text": "Tu trouves une porte et une fenêtre.",
        "choices": [("Ouvrir la porte", "door"), ("Regarder par la fenêtre", "window")],
    },
    "wait": {
        "text": "Rien ne se passe. Le temps passe.",
        "choices": [("Se lever", "explore"), ("S'endormir", "end_sleep")],
    },
    "door": {
        "text": "La porte est verrouillée.",
        "choices": [("Forcer la porte", "end_force"), ("Reculer", "start")],
    },
    "window": {
        "text": "Par la fenêtre, tu vois un jardin.",
        "choices": [("Grimper", "end_out"), ("Reculer", "start")],
    },
    "end_sleep": {"text": "Tu t'endors et te réveilles ailleurs. Fin.", "choices": []},
    "end_force": {"text": "Tu blesses ta main. Fin.", "choices": []},
    "end_out": {"text": "Tu sors dans le jardin et trouves la liberté. Fin.", "choices": []},
}

root = tk.Tk()
root.title("Terminal")
root.geometry("600x400")
root.configure(bg='black')
root.protocol("WM_DELETE_WINDOW", on_closing)  # Intercepte la croix

# Frame pour l'image dans le coin
image_frame = tk.Frame(root, bg='black')
image_frame.place(x=10, y=10)  # Position fixe dans le coin

# Chargement et affichage de l'image
if HAS_PIL:
    try:
        # Chemin absolu de l'image (dans le dossier images à côté du script)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        image_path = os.path.join(script_dir, "images", "corner_image.png")

        # Charger l'image
        image = Image.open(image_path)

        # Choisir l'algorithme de redimensionnement compatible selon la version de Pillow
        try:
            resample_algo = Image.Resampling.LANCZOS  # Pillow >= 9.1
        except AttributeError:
            # Fallback pour anciennes versions de Pillow
            resample_algo = getattr(Image, "LANCZOS", getattr(Image, "ANTIALIAS", 0))

        # Redimensionner l'image (ajustez la taille selon vos besoins)
        image = image.resize((80, 80), resample=resample_algo)
        photo = ImageTk.PhotoImage(image)

        # Créer le label avec l'image
        image_label = tk.Label(
            image_frame,
            image=photo,
            bg='black',
            bd=0  # Pas de bordure
        )
        # Conserver une référence pour éviter le garbage collection
        image_label.image = photo
        image_label.pack()

    except Exception as e:
        print(f"Erreur de chargement de l'image: {e}")
        print(f"Chemin testé: {locals().get('image_path', 'inconnu')}")
        # Placeholder en cas d'erreur
        placeholder = tk.Label(
            image_frame,
            text="[×]",  # Symbole simple
            bg='black',
            fg='#00ff00',
            font=('Courier', 14)
        )
        placeholder.pack()
else:
    print("PIL non installé - fonctionnement sans images")

# Style terminal (texte)
text_var = tk.StringVar()
text_label = tk.Label(
    root, 
    textvariable=text_var, 
    wraplength=540,
    justify="left",
    padx=20,
    pady=20,
    bg='black',
    fg='#00ff00',
    font=('Courier', 12)
)
text_label.pack(fill="both", expand=True)
# S'assurer que l'image reste au-dessus du texte
image_frame.lift()

# Frame pour les boutons
btn_frame = tk.Frame(root, bg='black')
btn_frame.pack(pady=8)

def show(node_id):
    node = STORY[node_id]
    text_var.set(node["text"])
    for w in btn_frame.winfo_children():
        w.destroy()
    if node["choices"]:
        for label, next_id in node["choices"]:
            btn = tk.Button(
                btn_frame,
                text=f"> {label}",
                width=30,
                command=partial(show, next_id),
                bg='black',
                fg='#00ff00',
                activebackground='#003300',
                activeforeground='#00ff00',
                font=('Courier', 10),
                relief='flat',
                borderwidth=0,
                cursor='hand2'
            )
            btn.pack(pady=2)
    else:
        tk.Button(
            btn_frame,
            text="> Quitter",
            width=30,
            command=root.destroy,
            bg='black',
            fg='#00ff00',
            activebackground='#003300',
            activeforeground='#00ff00',
            font=('Courier', 10),
            relief='flat',
            borderwidth=0,
            cursor='hand2'
        ).pack(pady=4)

# Démarrer avec la première scène
show("start")

# Lancer la boucle principale
# Remonter l'image encore une fois après la mise en page initiale
root.after(0, image_frame.lift)
root.mainloop()